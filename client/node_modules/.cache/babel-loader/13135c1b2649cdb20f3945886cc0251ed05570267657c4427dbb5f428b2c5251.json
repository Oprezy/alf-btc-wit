{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  async analyzeAddress(state, address) {\n    const response = await fetch(`https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=200&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`);\n    const result = await response.json();\n    const allData = result[\"data\"];\n    const toIncoming = [];\n    const fromOutgoing = [];\n    for (let i = 0; i < allData.length; i++) {\n      const allAddressInfo = allData[i];\n      const hash_id = allAddressInfo.transaction_id;\n      const rawTime = new Date(allAddressInfo.block_timestamp);\n      const time = rawTime.toLocaleString();\n      const value = allAddressInfo.value * 0.000001;\n      const from = allAddressInfo.from;\n      const to = allAddressInfo.to;\n      const addressInfo = {\n        hash: hash_id,\n        time: time,\n        amount: Math.floor(value),\n        //.toLocaleString(),\n        from: from,\n        to: to\n      };\n      if (value < 10) {\n        console.log(\"small value\");\n      } else if (address === to) {\n        toIncoming.push(addressInfo);\n      } else {\n        fromOutgoing.push(addressInfo);\n      }\n    }\n    const data = [toIncoming, fromOutgoing];\n    return data;\n  }\n};\n\n// TYWyTnSG7fVQtxL1NDyiLTeUpPUzhMWFfA\n\n// const sdk = require('api')('@tron/v4.7.2#17d20r2ql9cidams');\n\n// sdk.getTransactionInfoByAccountAddress({address: 'TXXp6EZsnQMBxfCaRkv9HgNEmX56UU6WKD'})\n// .then(({ data }) => console.log(data))\n// .catch(err => console.error(err));\n\n// \n// console.log(address);\n\n// const axios = require(\"axios\");\n\n// const data = [];\n\n// axios\n//   .get(\n//     `https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=200&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`\n//   )\n//   .then((response) => {\n//     const toIncoming = [];\n//     const fromOutgoing = [];\n//     const info = response.data.data;\n//     for (let i = 0; i < info.length; i++) {\n//       const allAddressInfo = info[i];\n//       const hash_id = allAddressInfo.transaction_id;\n//       const time = allAddressInfo.block_timestamp;\n//       const value = allAddressInfo.value;\n//       const from = allAddressInfo.from;\n//       const to = allAddressInfo.to;\n\n//       const addressInfo = {\n//         hash: hash_id,\n//         time: time,\n//         value: value,\n//         from: from,\n//         to: to,\n//       };\n//       // data.push(addressInfo);\n//       // console.log(addressInfo);\n\n//       if(address === to) {\n//         toIncoming.push(addressInfo);\n//       } else {\n//         fromOutgoing.push(addressInfo);\n//       }\n//     }\n//     // console.log(toIncoming);\n//     // console.log(state.commit);\n//     context.commit('saveNewData', toIncoming);\n//     // data.push(toIncoming);\n//     // data.push(fromOutgoing);\n//   })\n//   .catch((error) => {\n//     console.error(error);\n//   });\n\n//   return data;","map":{"version":3,"names":["analyzeAddress","state","address","response","fetch","result","json","allData","toIncoming","fromOutgoing","i","length","allAddressInfo","hash_id","transaction_id","rawTime","Date","block_timestamp","time","toLocaleString","value","from","to","addressInfo","hash","amount","Math","floor","console","log","push","data"],"sources":["/Users/cryptoprezzy/Desktop/Development/real/TRON Scraper/client/src/stores/primaryStats/actions.js"],"sourcesContent":["export default {\n  async analyzeAddress(state, address) {\n    const response = await fetch(\n      `https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=200&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`\n    );\n    const result = await response.json();\n    const allData = result[\"data\"];\n\n    const toIncoming = [];\n    const fromOutgoing = [];\n    for (let i = 0; i < allData.length; i++) {\n      const allAddressInfo = allData[i];\n      const hash_id = allAddressInfo.transaction_id;\n      const rawTime = new Date(allAddressInfo.block_timestamp);\n      const time = rawTime.toLocaleString();\n      const value = allAddressInfo.value * 0.000001;\n      const from = allAddressInfo.from;\n      const to = allAddressInfo.to;\n\n      const addressInfo = {\n        hash: hash_id,\n        time: time,\n        amount: Math.floor(value), //.toLocaleString(),\n        from: from,\n        to: to,\n      };\n\n      if (value < 10) {\n        console.log(\"small value\");\n      } else if (address === to) {\n        toIncoming.push(addressInfo);\n      } else {\n        fromOutgoing.push(addressInfo);\n      }\n    }\n    const data = [toIncoming, fromOutgoing];\n    return data;\n  },\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TYWyTnSG7fVQtxL1NDyiLTeUpPUzhMWFfA\n\n// const sdk = require('api')('@tron/v4.7.2#17d20r2ql9cidams');\n\n// sdk.getTransactionInfoByAccountAddress({address: 'TXXp6EZsnQMBxfCaRkv9HgNEmX56UU6WKD'})\n// .then(({ data }) => console.log(data))\n// .catch(err => console.error(err));\n\n\n// \n    // console.log(address);\n\n    // const axios = require(\"axios\");\n\n    // const data = [];\n\n    // axios\n    //   .get(\n    //     `https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=200&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`\n    //   )\n    //   .then((response) => {\n    //     const toIncoming = [];\n    //     const fromOutgoing = [];\n    //     const info = response.data.data;\n    //     for (let i = 0; i < info.length; i++) {\n    //       const allAddressInfo = info[i];\n    //       const hash_id = allAddressInfo.transaction_id;\n    //       const time = allAddressInfo.block_timestamp;\n    //       const value = allAddressInfo.value;\n    //       const from = allAddressInfo.from;\n    //       const to = allAddressInfo.to;\n\n    //       const addressInfo = {\n    //         hash: hash_id,\n    //         time: time,\n    //         value: value,\n    //         from: from,\n    //         to: to,\n    //       };\n    //       // data.push(addressInfo);\n    //       // console.log(addressInfo);\n\n    //       if(address === to) {\n    //         toIncoming.push(addressInfo);\n    //       } else {\n    //         fromOutgoing.push(addressInfo);\n    //       }\n    //     }\n    //     // console.log(toIncoming);\n    //     // console.log(state.commit);\n    //     context.commit('saveNewData', toIncoming);\n    //     // data.push(toIncoming);\n    //     // data.push(fromOutgoing);\n    //   })\n    //   .catch((error) => {\n    //     console.error(error);\n    //   });\n\n    //   return data;\n"],"mappings":";AAAA,eAAe;EACb,MAAMA,cAAcA,CAACC,KAAK,EAAEC,OAAO,EAAE;IACnC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,uCAAsCF,OAAQ,mFACjD,CAAC;IACD,MAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACpC,MAAMC,OAAO,GAAGF,MAAM,CAAC,MAAM,CAAC;IAE9B,MAAMG,UAAU,GAAG,EAAE;IACrB,MAAMC,YAAY,GAAG,EAAE;IACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAME,cAAc,GAAGL,OAAO,CAACG,CAAC,CAAC;MACjC,MAAMG,OAAO,GAAGD,cAAc,CAACE,cAAc;MAC7C,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACJ,cAAc,CAACK,eAAe,CAAC;MACxD,MAAMC,IAAI,GAAGH,OAAO,CAACI,cAAc,CAAC,CAAC;MACrC,MAAMC,KAAK,GAAGR,cAAc,CAACQ,KAAK,GAAG,QAAQ;MAC7C,MAAMC,IAAI,GAAGT,cAAc,CAACS,IAAI;MAChC,MAAMC,EAAE,GAAGV,cAAc,CAACU,EAAE;MAE5B,MAAMC,WAAW,GAAG;QAClBC,IAAI,EAAEX,OAAO;QACbK,IAAI,EAAEA,IAAI;QACVO,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACP,KAAK,CAAC;QAAE;QAC3BC,IAAI,EAAEA,IAAI;QACVC,EAAE,EAAEA;MACN,CAAC;MAED,IAAIF,KAAK,GAAG,EAAE,EAAE;QACdQ,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC5B,CAAC,MAAM,IAAI3B,OAAO,KAAKoB,EAAE,EAAE;QACzBd,UAAU,CAACsB,IAAI,CAACP,WAAW,CAAC;MAC9B,CAAC,MAAM;QACLd,YAAY,CAACqB,IAAI,CAACP,WAAW,CAAC;MAChC;IACF;IACA,MAAMQ,IAAI,GAAG,CAACvB,UAAU,EAAEC,YAAY,CAAC;IACvC,OAAOsB,IAAI;EACb;AACF,CAAC;;AAcD;;AAEA;;AAEA;AACA;AACA;;AAGA;AACI;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}