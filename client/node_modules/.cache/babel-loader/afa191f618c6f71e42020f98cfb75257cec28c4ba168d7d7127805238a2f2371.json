{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  saveAddress(context, payload) {\n    context.commit(\"saveAddress\", payload);\n  },\n  saveAddresses(context, payload) {\n    context.commit(\"saveAddresses\", payload);\n  },\n  async getStats(state) {\n    const current = new Date().getTime();\n    const aDay = 24 * 60 * 60 * 1000;\n    const endTime = current - aDay * 30 * 2;\n    const aMonth = aDay * 30 * 6;\n\n    // old data - start_timestamp=1680043160&end_timestamp=1688643217\n\n    const address = state.getters[\"getAddress\"];\n    const link = `https://apilist.tronscanapi.com/api/transfer/trc20?address=${address}&trc20Id=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t&start=0&limit=50&direction=0&reverse=true&db_version=1&start_timestamp=${aMonth}&end_timestamp=${endTime}`;\n    const response = await (await fetch(link)).json();\n    const transactions = response[\"data\"];\n    const refinedTranactions = [];\n    const outgoing = [];\n    for (let i = 0; i < transactions.length; i++) {\n      const hash = transactions[i].hash;\n      const to = transactions[i].to;\n      const from = transactions[i].from;\n      const amount = transactions[i].amount * 0.000001;\n      const rawTime = new Date(transactions[i].block_timestamp);\n      const time = rawTime.toLocaleString();\n      if (amount < 10) {\n        console.log(\"small one\");\n      } else if (from === address) {\n        const transaction = {\n          from: from,\n          to: to,\n          amount: amount,\n          time: time,\n          hash: hash\n        };\n        outgoing.push(transaction);\n      } else {\n        const transaction = {\n          from: from,\n          to: to,\n          amount: amount,\n          time: time,\n          hash: hash\n        };\n        refinedTranactions.push(transaction);\n      }\n    }\n    console.log(refinedTranactions);\n    console.log(outgoing);\n    const incomingOutgoing = [refinedTranactions, outgoing];\n    return incomingOutgoing;\n    // context.commit(\"saveData\", refinedTranactions);\n    // console.log(context.commit);\n  },\n\n  async analyzeAddress(state) {\n    const address = state.getters[\"getAddress\"];\n    const response = await fetch(`https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=200&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`);\n    const result = await response.json();\n    const allData = result[\"data\"];\n    // console.log(allData);\n\n    const toIncoming = [];\n    const fromOutgoing = [];\n    for (let i = 0; i < allData.length; i++) {\n      const allAddressInfo = allData[i];\n      const hash_id = allAddressInfo.transaction_id;\n      const time = allAddressInfo.block_timestamp;\n      const value = allAddressInfo.value * 0.000001;\n      const from = allAddressInfo.from;\n      const to = allAddressInfo.to;\n      const addressInfo = {\n        hash: hash_id,\n        time: time,\n        amount: value,\n        from: from,\n        to: to\n      };\n      if (value < 10) {\n        console.log();\n      }\n      if (address === to) {\n        toIncoming.push(addressInfo);\n      } else {\n        fromOutgoing.push(addressInfo);\n      }\n    }\n    // console.log(toIncoming, fromOutgoing); \n    const data = [toIncoming, fromOutgoing];\n    return data;\n\n    // console.log(address);\n\n    // const axios = require(\"axios\");\n\n    // const data = [];\n\n    // axios\n    //   .get(\n    //     `https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=200&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`\n    //   )\n    //   .then((response) => {\n    //     const toIncoming = [];\n    //     const fromOutgoing = [];\n    //     const info = response.data.data;\n    //     for (let i = 0; i < info.length; i++) {\n    //       const allAddressInfo = info[i];\n    //       const hash_id = allAddressInfo.transaction_id;\n    //       const time = allAddressInfo.block_timestamp;\n    //       const value = allAddressInfo.value;\n    //       const from = allAddressInfo.from;\n    //       const to = allAddressInfo.to;\n\n    //       const addressInfo = {\n    //         hash: hash_id,\n    //         time: time,\n    //         value: value,\n    //         from: from,\n    //         to: to,\n    //       };\n    //       // data.push(addressInfo);\n    //       // console.log(addressInfo);\n\n    //       if(address === to) {\n    //         toIncoming.push(addressInfo);\n    //       } else {\n    //         fromOutgoing.push(addressInfo);\n    //       }\n    //     }\n    //     // console.log(toIncoming);\n    //     // console.log(state.commit);\n    //     context.commit('saveNewData', toIncoming);\n    //     // data.push(toIncoming);\n    //     // data.push(fromOutgoing);\n    //   })\n    //   .catch((error) => {\n    //     console.error(error);\n    //   });\n\n    //   return data;\n  }\n};\n\n// TYWyTnSG7fVQtxL1NDyiLTeUpPUzhMWFfA\n\n// const sdk = require('api')('@tron/v4.7.2#17d20r2ql9cidams');\n\n// sdk.getTransactionInfoByAccountAddress({address: 'TXXp6EZsnQMBxfCaRkv9HgNEmX56UU6WKD'})\n// .then(({ data }) => console.log(data))\n// .catch(err => console.error(err));","map":{"version":3,"names":["saveAddress","context","payload","commit","saveAddresses","getStats","state","current","Date","getTime","aDay","endTime","aMonth","address","getters","link","response","fetch","json","transactions","refinedTranactions","outgoing","i","length","hash","to","from","amount","rawTime","block_timestamp","time","toLocaleString","console","log","transaction","push","incomingOutgoing","analyzeAddress","result","allData","toIncoming","fromOutgoing","allAddressInfo","hash_id","transaction_id","value","addressInfo","data"],"sources":["/Users/cryptoprezzy/Desktop/Development/real/TRON Scraper/client/src/stores/primaryStats/actions.js"],"sourcesContent":["export default {\n  saveAddress(context, payload) {\n    context.commit(\"saveAddress\", payload);\n  },\n  saveAddresses(context, payload) {\n    context.commit(\"saveAddresses\", payload);\n  },\n  async getStats(state) {\n    const current = new Date().getTime();\n    const aDay = 24 * 60 * 60 * 1000;\n    const endTime = current - aDay * 30 * 2;\n    const aMonth = aDay * 30 * 6;\n\n    // old data - start_timestamp=1680043160&end_timestamp=1688643217\n\n    const address = state.getters[\"getAddress\"];\n    const link = `https://apilist.tronscanapi.com/api/transfer/trc20?address=${address}&trc20Id=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t&start=0&limit=50&direction=0&reverse=true&db_version=1&start_timestamp=${aMonth}&end_timestamp=${endTime}`;\n    const response = await (await fetch(link)).json();\n    const transactions = response[\"data\"];\n    const refinedTranactions = [];\n    const outgoing = [];\n\n    for (let i = 0; i < transactions.length; i++) {\n      const hash = transactions[i].hash;\n      const to = transactions[i].to;\n      const from = transactions[i].from;\n      const amount = transactions[i].amount * 0.000001;\n      const rawTime = new Date(transactions[i].block_timestamp);\n      const time = rawTime.toLocaleString();\n\n      if (amount < 10) {\n        console.log(\"small one\");\n      } else if (from === address) {\n        const transaction = {\n          from: from,\n          to: to,\n          amount: amount,\n          time: time,\n          hash: hash,\n        };\n        outgoing.push(transaction);\n      } else {\n        const transaction = {\n          from: from,\n          to: to,\n          amount: amount,\n          time: time,\n          hash: hash,\n        };\n        refinedTranactions.push(transaction);\n      }\n    }\n    console.log(refinedTranactions);\n    console.log(outgoing);\n\n    const incomingOutgoing = [refinedTranactions, outgoing];\n\n    return incomingOutgoing;\n    // context.commit(\"saveData\", refinedTranactions);\n    // console.log(context.commit);\n  },\n  async analyzeAddress(state) {\n    const address = state.getters[\"getAddress\"];\n    const response = await fetch(\n      `https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=200&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`\n    );\n    const result = await response.json();\n    const allData = result[\"data\"];\n    // console.log(allData);\n\n    const toIncoming = [];\n    const fromOutgoing = [];\n    for (let i = 0; i < allData.length; i++) {\n      const allAddressInfo = allData[i];\n      const hash_id = allAddressInfo.transaction_id;\n      const time = allAddressInfo.block_timestamp;\n      const value = allAddressInfo.value  * 0.000001;\n      const from = allAddressInfo.from;\n      const to = allAddressInfo.to;\n\n      const addressInfo = {\n        hash: hash_id,\n        time: time,\n        amount: value,\n        from: from,\n        to: to,\n      };\n\n        if ( value < 10) {\n          console.log();\n          \n        }\n      if (address === to) {\n        toIncoming.push(addressInfo);\n      } else {\n        fromOutgoing.push(addressInfo);\n      }\n    }\n    // console.log(toIncoming, fromOutgoing); \n    const data = [toIncoming, fromOutgoing];\n    return data;\n\n    // console.log(address);\n\n    // const axios = require(\"axios\");\n\n    // const data = [];\n\n    // axios\n    //   .get(\n    //     `https://api.trongrid.io/v1/accounts/${address}/transactions/trc20?limit=200&contract_address=TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`\n    //   )\n    //   .then((response) => {\n    //     const toIncoming = [];\n    //     const fromOutgoing = [];\n    //     const info = response.data.data;\n    //     for (let i = 0; i < info.length; i++) {\n    //       const allAddressInfo = info[i];\n    //       const hash_id = allAddressInfo.transaction_id;\n    //       const time = allAddressInfo.block_timestamp;\n    //       const value = allAddressInfo.value;\n    //       const from = allAddressInfo.from;\n    //       const to = allAddressInfo.to;\n\n    //       const addressInfo = {\n    //         hash: hash_id,\n    //         time: time,\n    //         value: value,\n    //         from: from,\n    //         to: to,\n    //       };\n    //       // data.push(addressInfo);\n    //       // console.log(addressInfo);\n\n    //       if(address === to) {\n    //         toIncoming.push(addressInfo);\n    //       } else {\n    //         fromOutgoing.push(addressInfo);\n    //       }\n    //     }\n    //     // console.log(toIncoming);\n    //     // console.log(state.commit);\n    //     context.commit('saveNewData', toIncoming);\n    //     // data.push(toIncoming);\n    //     // data.push(fromOutgoing);\n    //   })\n    //   .catch((error) => {\n    //     console.error(error);\n    //   });\n\n    //   return data;\n  },\n};\n\n// TYWyTnSG7fVQtxL1NDyiLTeUpPUzhMWFfA\n\n// const sdk = require('api')('@tron/v4.7.2#17d20r2ql9cidams');\n\n// sdk.getTransactionInfoByAccountAddress({address: 'TXXp6EZsnQMBxfCaRkv9HgNEmX56UU6WKD'})\n// .then(({ data }) => console.log(data))\n// .catch(err => console.error(err));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}