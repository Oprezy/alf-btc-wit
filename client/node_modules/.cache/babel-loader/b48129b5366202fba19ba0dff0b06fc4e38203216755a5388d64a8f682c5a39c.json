{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"h3\", null, \"List of VIP Customers!\")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_base_card = _resolveComponent(\"base-card\");\n  return _openBlock(), _createElementBlock(\"section\", null, [_createVNode(_component_base_card, null, {\n    default: _withCtx(() => [_hoisted_1, _createTextVNode(\" \" + _toDisplayString($data.vipCustomers) + \" \", 1 /* TEXT */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.vipCustomers, customer => {\n      return _openBlock(), _createElementBlock(\"div\", {\n        key: customer.address\n      }, _toDisplayString(customer.alias), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" <p v-for=\\\"address in allAddresses\\\" :key=\\\"address\\\">\\n        <base-card>\\n          <router-link :to=\\\"'/all/' + address['single']\\\">\\n            <p v-if=\\\"address['owner']\\\">\\n              <b>{{ address[\\\"owner\\\"] }}</b>\\n            </p>\\n            <p v-else>\\n              {{ address[\\\"single\\\"] }}\\n            </p>\\n          </router-link>\\n          <router-link :address=\\\"address\\\" :to=\\\"'/setowner/' + address.single\\\">\\n            . (S.O)</router-link\\n          >\\n        </base-card>\\n      </p> \")]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_createVNode","_component_base_card","_hoisted_1","_toDisplayString","$data","vipCustomers","_Fragment","_renderList","customer","key","address","alias","_createCommentVNode"],"sources":["/Users/cryptoprezzy/Desktop/Development/real/TRON Scraper/client/src/components/tronOrg/VipCustomers.vue"],"sourcesContent":["<template>\n    <section>\n        <base-card>\n      <div><h3>List of VIP Customers!</h3></div>\n      {{ vipCustomers }}\n      <div v-for=\"customer in vipCustomers\" :key=\"customer.address\">{{ customer.alias }}</div>\n      <!-- <p v-for=\"address in allAddresses\" :key=\"address\">\n        <base-card>\n          <router-link :to=\"'/all/' + address['single']\">\n            <p v-if=\"address['owner']\">\n              <b>{{ address[\"owner\"] }}</b>\n            </p>\n            <p v-else>\n              {{ address[\"single\"] }}\n            </p>\n          </router-link>\n          <router-link :address=\"address\" :to=\"'/setowner/' + address.single\">\n            . (S.O)</router-link\n          >\n        </base-card>\n      </p> -->\n    </base-card>\n    </section>\n</template>\n\n\n\n<script>\nimport AuthenticationService from \"../../services/AuthenticationService\";\n\n\nexport default {\n    props: ['address'],\n    data() {\n        return {\n            vipCustomers: null,\n        }\n    },\n    methods() {\n\n    },\n    async created() {\n        console.log(this.address, 'address');\n        const payload = {\n            address: this.address\n        }\n        const response = await AuthenticationService.getVipCustomers(payload);\n        this.vipCustomers = response['data'].customers;\n        console.log(this.vipCustomers);\n \n    },\n}\n</script>"],"mappings":";gCAGMA,mBAAA,CAA0C,c,aAArCA,mBAAA,CAA+B,YAA3B,wBAAsB,E;;;;uBAFjCC,mBAAA,CAqBU,kBApBNC,YAAA,CAmBQC,oBAAA;sBAlBV,MAA0C,CAA1CC,UAA0C,E,iBAAA,GAC1C,GAAAC,gBAAA,CAAGC,KAAA,CAAAC,YAAY,IAAG,GAClB,kB,kBAAAN,mBAAA,CAAwFO,SAAA,QAAAC,WAAA,CAAhEH,KAAA,CAAAC,YAAY,EAAxBG,QAAQ;2BAApBT,mBAAA,CAAwF;QAAjDU,GAAG,EAAED,QAAQ,CAACE;0BAAYF,QAAQ,CAACG,KAAK;oCAC/EC,mBAAA,4gBAcQ,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}