{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"h2\", null, \"List of All addresses!\")], -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: \"\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_base_card = _resolveComponent(\"base-card\");\n  return _openBlock(), _createElementBlock(\"section\", null, [_hoisted_1, _createElementVNode(\"div\", null, _toDisplayString($data.allAddresses), 1 /* TEXT */), _createVNode(_component_router_link, {\n    to: \"google\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"OK\")]),\n    _: 1 /* STABLE */\n  }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.allAddresses, address => {\n    return _openBlock(), _createElementBlock(\"p\", _hoisted_2, [_createVNode(_component_base_card, null, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(address), 1 /* TEXT */)]),\n\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */)]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","key","_createElementBlock","_hoisted_1","_toDisplayString","$data","allAddresses","_createVNode","_component_router_link","to","_Fragment","_renderList","address","_hoisted_2","_component_base_card"],"sources":["/Users/cryptoprezzy/Desktop/Development/real/TRON Scraper/client/src/components/tronOrg/AddressList.vue"],"sourcesContent":["<template>\n  <section>\n    <div><h2>List of All addresses!</h2></div>\n    <div>{{ allAddresses }}</div>\n    <router-link to=\"google\">OK</router-link>\n    <p v-for=\"address in allAddresses\" key=\"\">\n      <base-card> {{ address }}</base-card>\n    </p>\n  </section>\n</template>\n\n\n\n<script>\nimport AuthenticationService from \"../../services/AuthenticationService\";\n\nexport default {\n  data() {\n    return {\n      allAddresses: null,\n    };\n  },\n  async created() {\n    const response = await AuthenticationService.fetchAllAddresses();\n    this.allAddresses = response[\"data\"][\"addresses\"];\n  },\n};\n</script>"],"mappings":";gCAEIA,mBAAA,CAA0C,c,aAArCA,mBAAA,CAA+B,YAA3B,wBAAsB,E;;EAGIC,GAAG,EAAC;AAAE;;;;uBAJ3CC,mBAAA,CAOU,kBANRC,UAA0C,EAC1CH,mBAAA,CAA6B,aAAAI,gBAAA,CAArBC,KAAA,CAAAC,YAAY,kBACpBC,YAAA,CAAyCC,sBAAA;IAA5BC,EAAE,EAAC;EAAQ;sBAAC,MAAE,C,iBAAF,IAAE,E;;yBAC3BP,mBAAA,CAEIQ,SAAA,QAAAC,WAAA,CAFiBN,KAAA,CAAAC,YAAY,EAAvBM,OAAO;yBAAjBV,mBAAA,CAEI,KAFJW,UAEI,GADFN,YAAA,CAAqCO,oBAAA;wBAAzB,MAAa,C,kCAAVF,OAAO,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}