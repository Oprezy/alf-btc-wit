{"ast":null,"code":"import TransactionList from \"../tronOrg/TransactionList.vue\";\nimport VipCustomers from \"../tronOrg/VipCustomers.vue\";\nimport TopVendors from \"../tronOrg/TopVendors.vue\";\nimport axios from \"axios\";\nexport default {\n  components: {\n    TransactionList,\n    VipCustomers,\n    TopVendors\n  },\n  data() {\n    return {\n      address: \"\",\n      addressAlias: \"\",\n      incoming: null,\n      outgoing: \"\",\n      dataAmount: 0,\n      outgoingAmount: 0\n    };\n  },\n  async created() {\n    this.address = this.$route.params.addr;\n    const payload1 = {\n      \"address\": this.address\n    };\n    axios.get('http://localhost:2010/txns/address', payload1).then(response => {\n      console.log(response);\n    }).catch(error => {});\n    this.incoming = datar.data[0];\n    this.outgoing = datar.data[1];\n    for (let i = 0; i < this.incoming.length; i++) {\n      this.dataAmount += this.incoming[i].amount;\n    }\n    for (let i = 0; i < this.outgoing.length; i++) {\n      this.outgoingAmount += this.outgoing[i].amount;\n    }\n    const ii = this.incoming[1];\n    this.addressAlias = ii.receiverAlias || 'null';\n  }\n};","map":{"version":3,"names":["TransactionList","VipCustomers","TopVendors","axios","components","data","address","addressAlias","incoming","outgoing","dataAmount","outgoingAmount","created","$route","params","addr","payload1","get","then","response","console","log","catch","error","datar","i","length","amount","ii","receiverAlias"],"sources":["/Users/prezzy/Documents/prezziy/Dev/Done/Projects/btc_scraper/client/src/components/ComponentsRoutes/AddressView.vue"],"sourcesContent":["<template>\n  <h4 v-if=\"addressAlias\"><router-link :to=\"'/register/' + address\"> {{ addressAlias }} </router-link> -- {{ address }} --\n    <a :href=\"'https://tronscan.org/#/address/' + address + '/transactions'\">TScan</a></h4>\n  <h3 v-else> <router-link :to=\"'/register/' + address\">{{ address }}</router-link></h3>\n\n\n\n  <section>\n    <base-card>\n      <h3>Stats</h3>\n      <p><b>In/Out:</b> {{ dataAmount.toLocaleString() }} / {{ outgoingAmount.toLocaleString() }}</p>\n    </base-card>\n\n    <top-vendors :address=\"address\" :totalOut=\"outgoingAmount\"></top-vendors>\n    <vip-customers :address=\"address\" :totalIn=\"dataAmount\"></vip-customers>\n  </section>\n\n  <section>\n    <div v-if=\"outgoing\">\n      <base-card>\n        <h3>Outgoing $Coins</h3>\n        <transaction-list v-for=\"transaction in outgoing\" :key=\"transaction.uniqueFactor\" :from=\"transaction.sender\"\n          :to=\"transaction.receiver\" :amount=\"transaction.amount\" :hash=\"transaction.hash\" :time=\"transaction.timeAgo\"\n          :toAlias=\"transaction.receiverAlias\" :fromAlias=\"transaction.senderAlias\"></transaction-list>\n      </base-card>\n    </div>\n  </section>\n\n  <section>\n    <div v-if=\"incoming\">\n      <base-card>\n        <h3>Incoming $Coins</h3>\n        <transaction-list v-for=\"transaction in incoming\" :key=\"transaction.uniqueFactor\" :from=\"transaction.sender\"\n          :to=\"transaction.receiver\" :amount=\"transaction.amount\" :hash=\"transaction.hash\" :time=\"transaction.timeAgo\"\n          :toAlias=\"transaction.receiverAlias\" :fromAlias=\"transaction.senderAlias\"></transaction-list>\n      </base-card>\n    </div>\n  </section>\n\n  <section />\n</template>\n\n\n<script>\nimport TransactionList from \"../tronOrg/TransactionList.vue\";\nimport VipCustomers from \"../tronOrg/VipCustomers.vue\";\nimport TopVendors from \"../tronOrg/TopVendors.vue\";\nimport axios from \"axios\";\n\nexport default {\n  components: {\n    TransactionList,\n    VipCustomers,\n    TopVendors\n  },\n  data() {\n    return {\n      address: \"\",\n      addressAlias: \"\",\n      incoming: null,\n      outgoing: \"\",\n      dataAmount: 0,\n      outgoingAmount: 0,\n    };\n  },\n  async created() {\n    this.address = this.$route.params.addr;\n\n    const payload1 = {\n      \"address\": this.address\n    }\n    axios.get('http://localhost:2010/txns/address', payload1)\n    .then((response) => { console.log(response); })\n    .catch((error) => { });\n\n    this.incoming = datar.data[0];\n    this.outgoing = datar.data[1];\n\n    for (let i = 0; i < this.incoming.length; i++) {\n      this.dataAmount += this.incoming[i].amount;\n    }\n    for (let i = 0; i < this.outgoing.length; i++) {\n      this.outgoingAmount += this.outgoing[i].amount;\n    }\n    const ii = this.incoming[1];\n    this.addressAlias = ii.receiverAlias || 'null';\n  }\n};\n</script>\n\n\n\n<style scoped>\nh3 {\n  width: 100%;\n  height: 3rem;\n  background-color: #3d008d;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: rgb(227, 215, 215);\n}\n</style>\n\n\n\n\n\n\n<!-- data() {\n    return {\n      address: \"\",\n      data: null,\n    };\n  },\n  methods: {\n    async submitForm() {\n      this.$store.dispatch(\"stats/saveAddress\", this.address);\n      const temp = await this.$store.dispatch(\"stats/getStats\");\n      this.$store.commit(\"stats/saveData\", temp);\n      console.log(\"ok\");\n      this.data = this.$store.getters[\"stats/getAddressData\"];\n    }, -->\n\n\n\n\n    <!-- \n<script>\nimport TransactionList from \"../tronOrg/TransactionList.vue\";\n\nexport default {\n  components: {\n    TransactionList,\n  },\n  data() {\n    return {\n      address: \"\",\n      data: null,\n      dataAmount: 0,\n      outgoing: \"\",\n      outgoingAmount: 0,\n    };\n  },\n  async created() {\n    this.address = this.$route.params.addr;\n\n    this.$store.dispatch(\"stats/saveAddress\", this.address);\n    const both = await this.$store.dispatch(\"stats/getStats\");\n    // this.$store.commit(\"stats/saveData\", temp);\n    console.log(\"ok\");\n    // const both = this.$store.getters[\"stats/getAddressData\"];\n    this.data = both[0];\n    this.outgoing = both[1];\n    console.log(this.data);\n\n    for (let i = 0; i < this.data.length; i++) {\n      this.dataAmount += this.data[i].amount;\n    }\n    for (let i = 0; i < this.outgoing.length; i++) {\n      this.outgoingAmount += this.outgoing[i].amount;\n    }\n  },\n};\n</script>\n -->\n\n\n <!--  // this.$store.dispatch(\"stats/saveAddress\", this.address);\n    // const both = await this.$store.dispatch(\"stats/getStats\");\n    // // this.$store.commit(\"stats/saveData\", temp);\n    // console.log(\"ok\");\n    // // const both = this.$store.getters[\"stats/getAddressData\"];\n    // this.data = both[0];\n    // this.outgoing = both[1];\n    // // console.log(this.data);\n\n    // for (let i = 0; i < this.data.length; i++) {\n    //   this.dataAmount += this.data[i].amount;\n    // }\n    // for (let i = 0; i < this.outgoing.length; i++) {\n    //   this.outgoingAmount += this.outgoing[i].amount;\n    // }\n    // console.log(this.address); -->"],"mappings":"AA4CA,OAAOA,eAAc,MAAO,gCAAgC;AAC5D,OAAOC,YAAW,MAAO,6BAA6B;AACtD,OAAOC,UAAS,MAAO,2BAA2B;AAClD,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,UAAU,EAAE;IACVJ,eAAe;IACfC,YAAY;IACZC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE,EAAE;MAChBC,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,CAAC;MACbC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI,CAACN,OAAM,GAAI,IAAI,CAACO,MAAM,CAACC,MAAM,CAACC,IAAI;IAEtC,MAAMC,QAAO,GAAI;MACf,SAAS,EAAE,IAAI,CAACV;IAClB;IACAH,KAAK,CAACc,GAAG,CAAC,oCAAoC,EAAED,QAAQ,EACvDE,IAAI,CAAEC,QAAQ,IAAK;MAAEC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IAAE,CAAC,EAC7CG,KAAK,CAAEC,KAAK,IAAK,CAAE,CAAC,CAAC;IAEtB,IAAI,CAACf,QAAO,GAAIgB,KAAK,CAACnB,IAAI,CAAC,CAAC,CAAC;IAC7B,IAAI,CAACI,QAAO,GAAIe,KAAK,CAACnB,IAAI,CAAC,CAAC,CAAC;IAE7B,KAAK,IAAIoB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAACjB,QAAQ,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAI,CAACf,UAAS,IAAK,IAAI,CAACF,QAAQ,CAACiB,CAAC,CAAC,CAACE,MAAM;IAC5C;IACA,KAAK,IAAIF,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAAChB,QAAQ,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAI,CAACd,cAAa,IAAK,IAAI,CAACF,QAAQ,CAACgB,CAAC,CAAC,CAACE,MAAM;IAChD;IACA,MAAMC,EAAC,GAAI,IAAI,CAACpB,QAAQ,CAAC,CAAC,CAAC;IAC3B,IAAI,CAACD,YAAW,GAAIqB,EAAE,CAACC,aAAY,IAAK,MAAM;EAChD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}