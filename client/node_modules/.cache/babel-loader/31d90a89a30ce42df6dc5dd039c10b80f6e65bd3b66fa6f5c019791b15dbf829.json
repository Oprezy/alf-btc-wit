{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-86898b2c\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"h3\", null, \"List of All addresses!\")], -1 /* HOISTED */));\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"i\", null, \"(View)\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  const _component_base_card = _resolveComponent(\"base-card\");\n  return _openBlock(), _createElementBlock(\"section\", null, [_createVNode(_component_base_card, null, {\n    default: _withCtx(() => [_hoisted_1, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.allAddresses, address => {\n      return _openBlock(), _createElementBlock(\"p\", {\n        key: address\n      }, [_createVNode(_component_base_card, null, {\n        default: _withCtx(() => [_ctx.owner ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, _toDisplayString(_ctx.owner), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createTextVNode(\" \" + _toDisplayString(address['single']) + \" \", 1 /* TEXT */), _createVNode(_component_router_link, {\n          to: '/all/' + address\n        }, {\n          default: _withCtx(() => [_hoisted_3]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"]), _createVNode(_component_router_link, {\n          address: address,\n          to: '/setowner/' + address\n        }, {\n          default: _withCtx(() => [_createTextVNode(\" . (S.O)\")]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"address\", \"to\"])]),\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */), _createCommentVNode(\" <address-view :address=\\\"address\\\"></address-view> \")]);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_createVNode","_component_base_card","_hoisted_1","_Fragment","_renderList","$data","allAddresses","address","key","_ctx","owner","_hoisted_2","_toDisplayString","_component_router_link","to","_hoisted_3","_createCommentVNode"],"sources":["/Users/cryptoprezzy/Desktop/Development/real/TRON Scraper/client/src/components/tronOrg/AddressList.vue"],"sourcesContent":["<template>\n  <section>\n    <base-card>\n      <div><h3>List of All addresses!</h3></div>\n      <p v-for=\"address in allAddresses\" :key=\"address\">\n        <base-card\n          >\n          <p v-if=\"owner\">{{ owner }}</p>\n          {{ address['single'] }} \n          <router-link :to=\"'/all/' + address\"><i>(View)</i></router-link>\n          <router-link :address=\"address\" :to=\"'/setowner/' + address\">\n            . (S.O)</router-link\n          >\n        </base-card>\n        <!-- <address-view :address=\"address\"></address-view> -->\n      </p>\n    </base-card>\n  </section>\n</template>\n\n\n<script>\nimport AuthenticationService from \"../../services/AuthenticationService\";\n// import SetOwner from \"../ComponentsRoutes/SetOwner.vue\";\n// import AddressView from \"../ComponentsRoutes/AddressView.vue\";\n\nexport default {\n  //   components: {\n  //     SetOwner,\n  //   },\n  data() {\n    return {\n      allAddresses: null,\n    };\n  },\n  computed: {\n    build() {\n      return \"https://tronscan.org/#/address/transfers\";\n    },\n  },\n  async created() {\n    const response = await AuthenticationService.fetchAllAddresses();\n    console.log(response['data']);\n    \n    this.allAddresses = response[\"data\"][\"addresses\"];\n  },\n};\n</script>\n\n\n<style scoped>\nh3 {\n  width: 100%;\n  height: 3rem;\n  background-color: #3d008d;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: rgb(229, 223, 223);\n}\n</style>\n"],"mappings":";;gEAGMA,mBAAA,CAA0C,c,aAArCA,mBAAA,CAA+B,YAA3B,wBAAsB,E;;;;gEAMUA,mBAAA,CAAa,WAAV,QAAM;;;;;uBARtDC,mBAAA,CAgBU,kBAfRC,YAAA,CAcYC,oBAAA;sBAbV,MAA0C,CAA1CC,UAA0C,G,kBAC1CH,mBAAA,CAWII,SAAA,QAAAC,WAAA,CAXiBC,KAAA,CAAAC,YAAY,EAAvBC,OAAO;2BAAjBR,mBAAA,CAWI;QAXgCS,GAAG,EAAED;MAAO,IAC9CP,YAAA,CAQYC,oBAAA;0BANV,MAA+B,CAAtBQ,IAAA,CAAAC,KAAK,I,cAAdX,mBAAA,CAA+B,KAAAY,UAAA,EAAAC,gBAAA,CAAZH,IAAA,CAAAC,KAAK,oB,oDAAO,GAC/B,GAAAE,gBAAA,CAAGL,OAAO,cAAa,GACvB,iBAAAP,YAAA,CAAgEa,sBAAA;UAAlDC,EAAE,YAAYP;;4BAAS,MAAa,CAAbQ,UAAa,C;;qDAClDf,YAAA,CAECa,sBAAA;UAFaN,OAAO,EAAEA,OAAO;UAAGO,EAAE,iBAAiBP;;4BAAS,MACpD,C,iBADoD,UACpD,E;;;;oCAGXS,mBAAA,wDAAyD,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}